<template>
	<view>
		<scroll-view scroll-y="true">
			<view>
				<view class="item">
					<text class="itemName">申请人:</text>
					<text class="input" placeholder="请选择申请人">{{ person }}</text>
				</view>
				<view class="hourLine"></view>

				<view class="item">
					<text class="itemName">申请部门:</text>
					<text class="input" placeholder="请选择申请部门">{{ department }}</text>
				</view>
				<view class="hourLine"></view>

				<!-- <view class="item">
					<text class="itemName">申请时间:</text>
					<text class="input" :value="date" type="text" />
				</view>
				<view class="hourLine"></view> -->

				<view class="item">
					<text class="itemName">公务车号*:</text>
					<text class="input">{{ carNo }}</text>
				</view>
				<view class="hourLine"></view>

				<view class="item">
					<text class="itemName">驾驶员*:</text>
					<text class="input">{{ driver }}</text>
				</view>
				<view class="hourLine"></view>

				<view class="item">
					<text class="itemName">使用期限*:</text>
					<input class="input" placeholder="请输入使用期限" v-model="userTime" />
				</view>
				<view class="hourLine"></view>

				<view class="item">
					<text class="itemName" style="display: flex;justify-content: center;align-items: center;">申请事由*:</text>
					<textarea class="input" :auto-height="true" placeholder="请输入申请事由" v-model="reason" />
				</view>
				<view class="hourLine"></view>
				<view class="item">
					<text class="itemName">是否用车*:</text>
					<input class="input" placeholder="" v-model="userCar" />
				</view>

				<view class="vText"></view>
				<uni-grid class="grid-view" :column="2" :show-border="false" :square="false">
					<uni-grid-item v-for="(item, dataindex) in personLine" :key="dataindex">
						<view class="item-content-view" @click="listClient(item, dataindex)">
							<text class="text" v-if="item.checked">{{ item.userNames + '(' + item.role + ')' }}</text>
							<text class="text1" v-else="item.checked">{{ item.userNames + '(' + item.role + ')' }}</text>
						</view>
					</uni-grid-item>
				</uni-grid>

				<view class="item" style="border-top: #CCCCCC 1rpx solid;">
					<text class="itemName" style="display: flex;justify-content: center;align-items: center;">部门负责人:</text>
					<text class="input" v-if="bmfzrRemote == read" :auto-height="true">{{ bmfzryj }}</text>
					<textarea class="input" v-if="bmfzrRemote == write" :auto-height="true" v-model="bmfzryj" />
				</view>
				<view class="hourLine"></view>
				<view class="item">
					<text class="itemName" style="display: flex;justify-content: center;align-items: center;">办公室意见:</text>
					<text class="input" v-if="bgsRemote == read" :auto-height="true">{{ bgsyj }}</text>
					<textarea class="input" v-if="bgsRemote == write" :auto-height="true" v-model="bgsyj" />
				</view>
				<view class="hourLine"></view>
				<view class="item">
					<text class="itemName" style="display: flex;justify-content: center;align-items: center;">分管领导:</text>
					<text class="input" v-if="fgldRemote == read" :auto-height="true">{{ fgldyj }}</text>
					<textarea class="input" v-if="fgldRemote == write" :auto-height="true" v-model="fgldyj" />
				</view>
				<view class="hourLine"></view>

				<!-- <uni-popup ref="showtip" :type="type" :mask-click="false" @change="change">
					<view class="uni-tip">
						<view v-for="(item, dataindex) in personLine" :key="dataindex">
							<view class="list-item" :showArrow="false" @click="listClient(item, dataindex)">
								<label>
									<text class="text" v-if="item.checked">{{ item.userNames + '(' + item.role + ')' }}</text>
									<text class="text1" v-else="item.checked">{{ item.userNames + '(' + item.role + ')' }}</text>
								</label>
							</view>
						</view>
						<view class="uni-tip-group-button">
							<text class="uni-tip-button" @click="cancel('tip')">取消</text>
							<text class="uni-tip-button" @click="cancel('tip')">确定</text>
						</view>
					</view>
				</uni-popup> -->

				<button class="btn" type="default" @click="UpData">{{ '提交' }}</button>
			</view>
		</scroll-view>
	</view>
</template>

<script>
var activityName = '';
var taskId = '';
var piId = '';
var runID = '';
var uId = '';
var role = '';
var executionId = '';
var destType = '';
var destName = '';
var signaName = '';
var userName = '';
var userCode = '';
var mainId = '';
var currentTime = '';
var resquestJSOB = require('../../../../../common/js/hy-request.js');
var urlJSOB = require('../../../../../common/js/hy-url.js');
var dataString = require('../../../../../common/js/hy-stringUtil.js');
var dateJson = require('../../../../../common/js/hy-date.js');
import uniGrid from '@/components/uni-grid/uni-grid.vue';
import uniGridItem from '@/components/uni-grid-item/uni-grid-item.vue';
export default {
	components: { uniGrid, uniGridItem },
	data() {
		return {
			write: dataString.write,
			read: dataString.read,
			bmfzryj: '',
			bmfzryj1: '',
			bmfzrRemote: 1,
			bgsyj: '',
			bgsyj1: '',
			bgsRemote: 1,
			fgldyj: '',
			fgldyj1: '',
			fgldRemote: 1,
			type: '',
			title: '',
			person: '',
			ecard: '',
			department: '',
			carNo: '',
			userCode: '',
			userName: '',
			leader: '',
			leaderCode: '',
			leaderName: '',
			driver: '',
			userTime: '',
			reason: '',
			userCar: '',
			flowAssignId: '',
			personLine: [],
			personLine1: [],
			comments: '',
			destTypeList: [],
			selectperson: []
		};
	},
	onLoad(options) {
		// const item = JSON.parse(decodeURIComponent(options.data));
		activityName = options.activityName;
		taskId = options.taskId;
		piId = options.piId;
		executionId = options.executionId;
		this.getUserCarFlowDetail();
	},
	methods: {
		getUserCarFlowDetail: function(e) {
			var that = this;
			resquestJSOB.sendGetRequestJson({
				url: urlJSOB.willdodetail, //urlJSOB.base+"repair/getMeasureCountMeasureBus.do",//
				data: {
					activityName: activityName,
					taskId: taskId,
					piId: piId
				},
				successCallBack: function(data) {
					runID = data.mainform[0].runId;
					mainId = data.mainform[0].mainId;
					that.person = data.mainform[0].sqr;
					that.department = data.mainform[0].sqbm;
					that.carNo = data.mainform[0].gwch;
					that.driver = data.mainform[0].jsy;
					that.userTime = data.mainform[0].syqx;
					that.reason = data.mainform[0].sqsy;
					that.userCar = data.mainform[0].sfccyc;
					that.bmfzrRemote = data.formRights[0].bmfzryj;
					that.bgsRemote = data.formRights[0].bgsyj;
					that.fgldRemote = data.formRights[0].fgldyj;
					if (data.mainform[0].bmfzryj != '') {
						that.bmfzryj1 = data.mainform[0].bmfzryj;
						that.bmfzryj = JSON.parse(data.mainform[0].bmfzryj)[0].v;
					}
					console.log(that.bmfzryj);
					if (data.mainform[0].bgsyj != '') {
						that.bgsyj1 = data.mainform[0].bgsyj;
						that.bgsyj = JSON.parse(data.mainform[0].bgsyj)[0].v;
					}
					if (data.mainform[0].fgldyj != '') {
						that.fgldyj1 = data.mainform[0].fgldyj;
						that.fgldyj = JSON.parse(data.mainform[0].fgldyj)[0].v;
					}

					for (var i = 0; i < data.trans.length; i++) {
						that.destTypeList.push(data.trans[i]);
					}
					that.getFlowLine();
				},
				failCallBack: function(e) {
					print(e.msg);
				}
			});
		},
		//获取路径
		getFlowLine: function(e) {
			if (this.destTypeList.length == 1) {
				destType = this.destTypeList[0].destType;
				destName = this.destTypeList[0].destination;
				this.selectperson = [];
				if (destType.indexOf('decision') != -1 || destType.indexOf('fork') != -1 || destType.indexOf('join') != -1) {
					this.getOnLine();
				} else if (destType.indexOf('end') == -1) {
					this.getNoEndLine();
				} else {
					this.getNoHandlerLine();
				}
				signaName = this.destTypeList[0].name;
			} else {
				for (var i = 0; i < this.destTypeList.length; i++) {
					this.namelist.push(this.destTypeList[i].name);
				}
				uni.showActionSheet({
					itemList: this.namelist,
					success: function(res) {
						destType = res.destType;
						destName = res.destination;
						this.selectperson = [];
						if (destType.indexOf('decision') != -1 || destType.indexOf('fork') != -1 || destType.indexOf('join') != -1) {
							this.getOnLine();
						} else if (destType.indexOf('end') == -1) {
							this.getNoEndLine();
						} else {
							this.getNoHandlerLine();
						}
						signaName = this.destTypeList[0].name;
					},
					fail: function(res) {
						print(res.errMsg);
					}
				});
			}
		},
		getOnLine: function(e) {
			var that = this;
			resquestJSOB.sendGetRequestJson({
				url: urlJSOB.online,
				data: {
					taskId: taskId,
					activityName: destName,
					isParentFlow: false
				},
				successCallBack: function(data) {
					that.personLine = [];
					that.personLine1 = [];
					for (var i = 0; i < data.data.length; i++) {
						that.personLine1.push(data.data[i]);
					}
					for (var i = 0; i < that.personLine1.length; i++) {
						let nametemp = that.personLine1[i].userNames.split(',');
						let codetemp = that.personLine1[i].userCodes.split(',');
						for (var k = 0; k < nametemp.length; k++) {
							var a = {
								checked: that.personLine1[i].checked,
								role: that.personLine1[i].role,
								route: that.personLine1[i].route,
								type: that.personLine1[i].type,
								userCodes: codetemp[k],
								userNames: nametemp[k]
							};
							that.personLine.push(a);
						}
					}
				},
				failCallBack: function(error) {
					print(error);
				}
			});
		},
		getNoEndLine: function(e) {
			var that = this;
			resquestJSOB.sendGetRequestJson({
				url: urlJSOB.noendline,
				data: {
					taskId: taskId,
					activityName: destName,
					isParentFlow: false
				},
				successCallBack: function(data) {
					that.personLine = [];
					that.personLine1 = [];
					for (var i = 0; i < data.data.length; i++) {
						that.personLine1.push(data.data[i]);
					}
					for (var i = 0; i < that.personLine1.length; i++) {
						let nametemp = that.personLine1[i].userNames.split(',');
						let codetemp = that.personLine1[i].userCodes.split(',');
						for (var k = 0; k < nametemp.length; k++) {
							var a = {
								checked: that.personLine1[i].checked,
								role: that.personLine1[i].role,
								route: that.personLine1[i].route,
								type: that.personLine1[i].type,
								userCodes: codetemp[k],
								userNames: nametemp[k]
							};
							that.personLine.push(a);
						}
					}
				},
				failCallBack: function(error) {
					print(error);
				}
			});
		},
		getNoHandlerLine: function(e) {
			var that = this;
			resquestJSOB.sendGetRequestJson({
				url: urlJSOB.nohandlerline,
				data: {
					taskId: taskId
				},
				successCallBack: function(data) {
					that.UpData();
				},
				failCallBack: function(error) {
					print(error);
				}
			});
		},

		listClient: function(e, index) {
			if (this.selectperson.length == 0) {
				e.checked = true;
				this.selectperson.push(e);
			} else {
				if (this.selectperson.indexOf(e) != -1) {
					e.checked = false;
					this.selectperson.push(e);
					this.selectperson = this.selectperson.filter(function(item) {
						return item != e;
					});
				} else {
					e.checked = true;
					this.selectperson.push(e);
				}
			}
		},
		//上传数据
		UpData: function(e) {
			if (this.bmfzrRemote == dataString.write) {
				if (!this.bmfzryj) {
					uni.showToast({
						title: '请签字',
						icon: 'none',
						duration: 800,
						position: 'bottom'
					});
					return;
				}
			}
			if (this.bgsRemote == dataString.write) {
				if (!this.bgsyj) {
					uni.showToast({
						title: '请签字',
						icon: 'none',
						duration: 800,
						position: 'bottom'
					});
					return;
				}
			}
			if (this.fgldRemote == dataString.write) {
				if (!this.fgldyj) {
					uni.showToast({
						title: '请签字',
						icon: 'none',
						duration: 800,
						position: 'bottom'
					});
					return;
				}
			}
			if (this.selectperson.length == 0&&this.personLine.length != 0) {
				uni.showToast({
					title: '请选择审批人',
					icon: 'none',
					duration: 800,
					position: 'bottom'
				});
				return;
			}

			if (this.bmfzrRemote == this.write) {
				this.comments = this.bmfzryj;
			} else if (this.bgsRemote == this.write) {
				this.comments = this.bgsyj;
				// this.bgsyj = '[{ui:' + userCode + 'un:' + userName + 'c:' + currentTime + 'v:' + this.bgsyj + '}]';
			} else if (this.fgldRemote == this.write) {
				this.comments = this.fgldyj;
				// this.fgldyj = '[{ui:' + userCode + 'un:' + userName + 'c:' + currentTime + 'v:' + this.fgldyj + '}]';
			}

			if (this.selectperson.length == 1) {
				uId = this.selectperson[0].userCodes;
				this.flowAssignId = this.selectperson[0].role + '|' + this.selectperson[0].userCodes;
			}
			if (this.selectperson.length > 1) {
				for (var i = 0; i < this.selectperson.length; i++) {
					if (uId != '') {
						if (role.indexOf(this.selectperson[i].role) != -1) {
							uId = uId + ',' + this.selectperson[i].userCodes;
						} else {
							role = role + ':' + this.selectperson[i].role;
							uId = uId + ':' + this.selectperson[i].userCodes;
						}
					} else {
						role = this.selectperson[i].role;
						uId = this.selectperson[i].userCodes;
					}
				}

				this.flowAssignId = role + '|' + uId;
			}
			var that = this;
			var myData = new FormData();
			myData.append('useTemplate', false);
			myData.append('startFlow', true);
			myData.append('destName', destName);
			myData.append('sendMsg', true);
			myData.append('sendMail', true);
			myData.append('mainId', mainId);
			myData.append('taskId', taskId);
			myData.append('flowAssignId', that.flowAssignId);
			myData.append('defId', dataString.userCarDefId);
			myData.append('formDefId', dataString.userCarFormDefId);
			myData.append('signaName', signaName);
			myData.append('sqbmDid', uni.getStorageSync('depId'));
			myData.append('sqbm', uni.getStorageSync('depName'));
			myData.append('sqrUId', uni.getStorageSync('userId'));
			myData.append('sqr', that.person);
			myData.append('sj', that.date);
			myData.append('gwch', that.carNo);
			myData.append('jsyUId', that.userCode);
			myData.append('jsy', that.driver);
			myData.append('syqx', that.userTime);
			myData.append('sqsy', that.reason);
			myData.append('sfccyc', that.userCar);
			myData.append('comments', that.comments);
			myData.append('bmfzryj', that.makeData(that.bmfzryj, that.bmfzryj1, that.bmfzrRemote));
			myData.append('bgsyj', that.makeData(that.bgsyj, that.bgsyj1, that.bgsRemote));
			myData.append('fgldyj', that.makeData(that.fgldyj, that.fgldyj1, that.fgldRemote));
			console.log(myData);
			resquestJSOB.sendPost1RequestJson({
				url: urlJSOB.willflowup,
				data: {
					myData
				},
				successCallBack: function(data) {
					if ((data.success = 'true')) {
						uni.navigateBack({
							delta: 1
						});
					}
					uni.navigateBack({
						delta: 1
					});
				},
				failCallBack: function(error) {
					print(error);
				}
			});
		},
		makeData: function(e, e1, _index) {
			if (_index == dataString.write) {
				userCode = uni.getStorageSync('userId');
				userName = uni.getStorageSync('userName');
				currentTime = dateJson.getTime();
				var a = {
					ui: userCode,
					un: userName,
					c: currentTime,
					v: e
				};
				console.log(a);
				var dataSingle = JSON.stringify(a);
				console.log(dataSingle);
				return '[' + dataSingle + ']';
				//'"ui":"' + userCode + '","un":"' + userName + '","c":"' + currentTime + '","v":"' + e+'"'
			} else {
				return e1;
			}
		}
	}
};
</script>

<style>
@import '../../../../../common/css/itemName.css';
.btn {
	margin: 50rpx;
	background-color: #007aff;
	color: #ffffff;
}
.input {
	font-size: 30rpx;
	line-height: 90rpx;
}
/* 提示窗口 */
.uni-tip {
	/* #ifndef APP-NVUE */
	display: flex;
	flex-direction: column;
	/* #endif */
	padding: 15px;
	width: 300px;
	background-color: #fff;
	border-radius: 10px;
}

.uni-tip-title {
	margin-bottom: 10px;
	text-align: center;
	font-weight: bold;
	font-size: 16px;
	color: #333;
}

.uni-tip-content {
	/* padding: 15px;
  */
	font-size: 14px;
	color: #666;
}

.uni-tip-group-button {
	/* #ifndef APP-NVUE */
	display: flex;
	/* #endif */
	flex-direction: row;
	margin-top: 20px;
}

.uni-tip-button {
	flex: 1;
	text-align: center;
	font-size: 14px;
	color: #3b4144;
}
</style>
