<template>
	<view>
		<scroll-view scroll-y="true">
			<view>
				<view class="item">
					<text class="itemName">申请人:</text>
					<text class="input" placeholder="请选择申请人">{{ person }}</text>
				</view>
				<view class="hourLine"></view>

				<view class="item">
					<text class="itemName">申请部门:</text>
					<text class="input" placeholder="请选择申请部门">{{ department }}</text>
				</view>
				<view class="hourLine"></view>

				<!-- <view class="item">
					<text class="itemName">申请时间:</text>
					<text class="input" :value="date" type="text" />
				</view>
				<view class="hourLine"></view> -->

				<view class="item">
					<text class="itemName">公务车号*:</text>
					<text class="input">{{ carNo }}</text>
				</view>
				<view class="hourLine"></view>

				<view class="item">
					<text class="itemName">驾驶员*:</text>
					<text class="input">{{ driver }}</text>
				</view>
				<view class="hourLine"></view>

				<view class="item">
					<text class="itemName">使用期限*:</text>
					<input class="input" placeholder="请输入使用期限" v-model="userTime" />
				</view>
				<view class="hourLine"></view>

				<view class="item">
					<text class="itemName" style="display: flex;justify-content: center;align-items: center;">申请事由*:</text>
					<textarea class="input" :auto-height="true" placeholder="请输入申请事由" v-model="reason" style="padding-left: 25rpx;" />
				</view>
				<view class="hourLine"></view>

				<view class="item" style="background-color: #CCCCCC;height: 35rpx;"></view>

				<view class="item">
					<text class="itemName" style="display: flex;justify-content: center;align-items: center;">部门负责人:</text>
					<text class="input" v-if="bmfzrRemote == read" :auto-height="true" v-model="bmfzryj" />
					<textarea class="input" v-if="bmfzrRemote == write" :auto-height="true" v-model="bmfzryj"  />
				</view>
				<view class="hourLine"></view>
				<view class="item">
					<text class="itemName" style="display: flex;justify-content: center;align-items: center;">办公室意见*:</text>
					<text class="input" v-if="bgsRemote == read" :auto-height="true" v-model="bgsyj" style="padding-top: 30rpx; padding-left: 25rpx;" />
					<textarea class="input" v-if="bgsRemote == write" :auto-height="true" v-model="bgsyj" style="padding-top: 30rpx; padding-left: 25rpx;" />
				</view>
				<view class="hourLine"></view>
				<view class="item">
					<text class="itemName" style="display: flex;justify-content: center;align-items: center;">分管领导*:</text>
					<text class="input" v-if="fgldRemote == read" :auto-height="true" v-model="fgldyj" style="padding-top: 30rpx; padding-left: 25rpx;" />
					<textarea class="input" v-if="fgldRemote == write" :auto-height="true" v-model="fgldyj" style="padding-top: 30rpx; padding-left: 25rpx;" />
				</view>
				<view class="hourLine"></view>

				<uni-popup ref="showtip" :type="type" :mask-click="false" @change="change">
					<view class="uni-tip">
						<view v-for="(item, dataindex) in test" :key="dataindex">
							<view class="list-item" :showArrow="false" @click="listClient(item, dataindex)">
								<label>
									<checkbox :value="item.userCodes+'('+item.role+')'" />
									<text>{{ item.userCodes+'('+item.role+')' }}</text>
								</label>
							</view>
						</view>
						<view class="uni-tip-group-button">
							<text class="uni-tip-button" @click="cancel('tip')">取消</text>
							<text class="uni-tip-button" @click="cancel('tip')">确定</text>
						</view>
					</view>
				</uni-popup>

				<button class="btn" type="default" @click="getFlowLine">{{ '提交' }}</button>
			</view>
		</scroll-view>
	</view>
</template>

<script>
var activityName = '';
var taskId = '';
var piId = '';
var runID = '';
var uId = '';
var role = '';
var executionId = '';
var destType = '';
var destName = '';
var signaName = '';
var resquestJSOB = require('../../../../../common/js/hy-request.js');
var urlJSOB = require('../../../../../common/js/hy-url.js');
var dataString = require('../../../../../common/js/hy-stringUtil.js');
export default {
	components: {},
	data() {
		return {
			write: dataString.write,
			read: dataString.read,
			bmfzryj: '',
			bmfzrRemote: 1,
			bgsyj: '',
			bgsRemote: 1,
			fgldyj: '',
			fgldRemote: 1,
			type: '',
			title: '',
			person: '',
			ecard: '',
			department: '',
			carNo: '',
			userCode: '',
			userName: '',
			leader :'',
			leaderCode :'',
			leaderName :'',
			driver: '',
			userTime: '',
			reason: '',
			flowAssignId:'',
			nametemp: [],
			allnametemp:[],
			codetemp:[],
			allcodetemp:[],
			bigNametemp: [],
			bigCodetemp:[],
			destTypeList: [],
			namelist:[],
			selectperson: [],
			selectindex: [],
			test: [],
		};
	},
	onLoad(options) {
		// const item = JSON.parse(decodeURIComponent(options.data));
		activityName = options.activityName;
		taskId = options.taskId;
		piId = options.piId;
		executionId = options.executionId;
		console.log(options);
		console.log(activityName+taskId+piId+executionId);
		this.getUserCarFlowDetail();
	},
	methods: {
		getUserCarFlowDetail: function(e) {
			var that = this;
			resquestJSOB.sendGetRequestJson({
				url: urlJSOB.willdodetail, //urlJSOB.base+"repair/getMeasureCountMeasureBus.do",//
				data: {
					activityName: activityName,
					taskId: taskId,
					piId: piId
				},
				successCallBack: function(data) {
					console.log(data);
					runID = data.mainform[0].runId;
					that.person = data.mainform[0].sqr;
					that.department = data.mainform[0].sqbm;
					that.carNo = data.mainform[0].gwch;
					that.driver = data.mainform[0].jsy;
					that.userTime = data.mainform[0].syqx;
					that.reason = data.mainform[0].sqsy;
					that.bmfzryj = data.mainform[0].bmfzryj;
					that.bmfzrRemote = data.formRights[0].bmfzryj;
					console.log(that.bmfzrRemote);
					that.bgsyj = data.mainform[0].bgsyj;
					that.bgsRemote = data.formRights.bgsyj;
					that.fgldyj = data.mainform[0].fgldyj;
					that.fgldRemote = data.formRights.fgldyj;
					// var data1 = {"bmfzryj":"2","bgsyj":"1","fgldyj":"1"};
					// console.log(data1);
					// console.log(data1.bmfzryj);
					for (var i = 0; i < data.trans.length; i++) {
						that.destTypeList.push(data.trans[i]);
					}
				},
				failCallBack: function(e) {
					print(e);
					console.log(e);
				}
			});
		},
		//获取路径
		getFlowLine: function(e) {
			if (this.bmfzrRemote == dataString.write) {
				if (!this.bmfzryj) {
					uni.showToast({
						title: '请签字',
						icon: 'none',
						duration: 800,
						position: 'bottom'
					});
					return;
				}
			}
			if (this.bgsRemote == dataString.write) {
				if (!this.bgsyj) {
					uni.showToast({
						title: '请签字',
						icon: 'none',
						duration: 800,
						position: 'bottom'
					});
					return;
				}
			}
			if (this.fgldRemote == dataString.write) {
				if (!this.fgldyj) {
					uni.showToast({
						title: '请签字',
						icon: 'none',
						duration: 800,
						position: 'bottom'
					});
					return;
				}
			}
			if (this.destTypeList.length == 1) {
				console.log("11")
				destType = this.destTypeList[0].destType;
				destName = this.destTypeList[0].destination;
				this.selectperson = [];
				if (destType.indexOf('decision')!=-1 || destType.indexOf('fork')!=-1 || destType.indexOf('join')!=-1) {
					console.log("1")
					this.getOnLine();
				} else if (destType.indexOf('end') == -1) {
					console.log("2")
					this.getNoEndLine();
				} else {
					console.log("3")
					this.getNoHandlerLine();
				}
				signaName = this.destTypeList[0].name;
			} else {
				console.log("22")
				 for (var i = 0; i < this.destTypeList.length; i++) {
				     this.namelist.push(this.destTypeList[i].name);
				 }
				uni.showActionSheet({
					itemList: this.namelist,
					success: function(res) {
						destType = res.destType;
						destName = res.destination;
						this.selectperson = [];
						if (destType.indexOf('decision')!=-1 || destType.indexOf('fork')!=-1 || destType.indexOf('join')!=-1) {
							this.getOnLine();
						} else if (destType.indexOf('end') == -1) {
							this.getNoEndLine();
						} else {
							this.getNoHandlerLine();
						}
						signaName = this.destTypeList[0].name;
					},
					fail: function(res) {
						print(res.errMsg);
					}
				});
			}
		},
		getOnLine:function(e){
			var that = this;
			resquestJSOB.sendGetRequestJson({
				url: urlJSOB.online,
				data: {
					taskId: taskId,
					activityName:destName,
					isParentFlow:false
				},
				successCallBack: function(data) {
					console.log("online---"+data);
					console.log(data);
					for(var i = 0;i<data.data.length;i++){
						that.test.push(data.data[i]);
					}
					// if (data.data.length > 1) {
					// 	that.role = data.data[1].role;
					// 	that.userCode = data.data[1].userCodes;
					// 	that.userName = data.data[1].userNames;
					// 	that.nametemp = that.userName.split(",");
					// 	that.codetemp = that.userCode.split(",");
					// }
					// that.leader = data.data[0].role;
					// that.leaderCode = data.data[0].userCodes;
					// that.leaderName = data.data[0].userNames;
					// that.bigNametemp = that.leaderName.split(",");
					// that.bigCodetemp = that.leaderCode.split(",");
					// that.allnametemp = that.nametemp.concat(that.bigNametemp);
					// that.allcodetemo = that.codetemp.concat(that.bigCodetemp);
					that.togglePopup('center', 'tip');
				},
				failCallBack: function(error) {
					print(error);
				}
			})
		},
		getNoEndLine:function(e){
			var that = this;
			resquestJSOB.sendGetRequestJson({
				url: urlJSOB.noendline,
				data: {
					taskId: taskId,
					activityName:destName,
					isParentFlow:false
				},
				successCallBack: function(data) {
					console.log("NoEndLine---");
					console.log(data);
					for(var i = 0;i<data.data.length;i++){
						that.test.push(data.data[i]);
					}
					// if (data.data.length > 1) {
					// 	that.role = data[1].role;
					// 	that.userCode = data.data[1].userCodes;
					// 	that.userName = data.data[1].userNames;
					// 	that.nametemp = data.userName.split(",");
					// 	that.codetemp = data.userCode.split(",");
					// }
					// that.leader = data.data[0].role;
					// that.leaderCode = data.data[0].userCodes;
					// that.leaderName = data.data[0].userNames;
					// that.bigNametemp = that.leaderName.split(",");
					// that.bigCodetemp = that.leaderCode.split(",");
					// that.allnametemp = that.nametemp.concat(that.bigNametemp);
					// that.allcodetemo = that.codetemp.concat(that.bigCodetemp);
					// console.log(that.allnametemp)
					that.togglePopup('center', 'tip');
				},	
				failCallBack: function(error) {
					print(error);
					console.log(error)
				}
			})
		},
		getNoHandlerLine:function(e){
			var that = this;
			resquestJSOB.sendGetRequestJson({
				url: urlJSOB.nohandlerline,
				data: {
					taskId: taskId,
				},
				successCallBack: function(data) {
					// console.log(data);
					 console.log("3");
					// if (data.length > 1) {
					// 	that.role = data[1].role;
					// 	that.userCode = data.data[1].userCodes;
					// 	that.userName = data.data[1].userNames;
					// 	that.nametemp = data.userName.split(",");
					// 	that.codetemp = data.userCode.split(",");
					// }
					// that.leader = data.data[0].role;
					// that.leaderCode = data.data[0].userCodes;
					// that.leaderName = data.data[0].userNames;
					// that.bigNametemp = that.leaderName.split(",");
					// that.bigCodetemp = that.leaderCode.split(",");
					// that.allnametemp = that.nametemp.concat(that.bigNametemp);
					// that.allcodetemo = that.codetemp.concat(that.bigCodetemp);
					// that.togglePopup('center', 'tip');
						that.UpData();
				},
				failCallBack: function(error) {
					print(error);
					console.log(error);
				}
			})
		},
		//显示弹出框
		togglePopup(type, open) {
			switch (type) {
				case 'top':
					this.content = '顶部弹出 popup';
					break;
		
				case 'bottom':
					this.content = '底部弹出 popup';
					break;
				case 'center':
					this.content = '居中弹出 popup';
					break;
			}
			this.type = type;
			this.$nextTick(() => {
				this.$refs['show' + open].open();
			});
		},
		cancel(type) {
			this.$refs['show' + type].close();
		},
		change(e) {
			console.log('是否打开:' + e.show);
			if(this.selectperson.length==0){
				print("请选择审批人");
				console.log('请选择审批人:');
			}else{
				this.UpData();
			}
		},
		listClient: function(e,index) {
			if(this.selectperson.length==0){
				this.selectperson.push(e);
			}else{
				if(this.selectperson.indexOf(e)!=-1){
					this.selectperson = this.selectperson.filter(function(item) {
					    return item != e
					});
				}else{
					this.selectperson.push(e);
				}
			}
		
		},
		//上传数据
		UpData:function(e){
			if (this.selectperson.length == 1) {
			    uId = this.selectperson[0].userCodes;
				this.flowAssignId = this.selectperson[0].role+"|"+this.selectperson[0].userCodes;
			}
			if (this.selectperson.length > 1) {
			    for (var i = 1; i < this.selectperson.length; i++) {
			        if (i < this.selectperson.length - 1) {
			            uId = uId + this.selectperson[i].userCodes + ":";
			        } else {
			            uId = uId + this.selectperson[i].userCodes;
			        }
			    }
				for (var i = 1; i < this.selectperson.length; i++) {
				    if (i < this.selectperson.length - 1) {
				        role = role + this.selectperson[i].role + ":";
				    } else {
				        role = role + this.selectperson[i].role;
				    }
				}
			    uId = this.selectperson[0].userCodes + ":" + uId;
				role = this.selectperson[0].role + ":" + role;
				this.flowAssignId = role+"|"+uId;
			}
			console.log(uId);
			console.log(this.flowAssignId);
			var that = this;
			resquestJSOB.sendPostRequestJson({
				url: urlJSOB.willflowup,
				data: {
					useTemplate:false,
					startFlow: true,
					destName: destName,
					sendMsg: true,
					sendMail: true,
					taskId:taskId,
					flowAssignId: that.flowAssignId,
					defId: dataString.userCarDefId,
					formDefId: dataString.userCarFormDefId,
					signaName:signaName,
					sqbmDid: uni.getStorageSync("depId"),
					sqbm: uni.getStorageSync("depName"),
					sqrUId: uni.getStorageSync("userId"),
					sqr: that.person,
					sj: that.date,
					gwch: that.carNo,
					jsyUId: that.userCode,
					jsy: that.driver,
					syqx: that.userTime,
					sqsy: that.reason,
					bmfzryj:that.bmfzryj,
					bgsyj:that.bgsyj,
					fgldyj:that.fgldyj
				},
				successCallBack: function(data) {
					console.log(data);
					console.log(data.success);
					if(data.success="true"){
						uni.navigateBack({
							delta: 1
						})
					}
					uni.navigateBack({
						delta: 1
					})
				},
				failCallBack: function(error) {
					print(error);
					console.log(error);
				}
			});
		}
	}
};
</script>

<style>
@import '../../../../../common/css/itemName.css';
.btn {
	margin: 50rpx;
	background-color: #007aff;
	color: #ffffff;
}
.input {
	font-size: 30rpx;
	line-height: 90rpx;
}
/* 提示窗口 */
.uni-tip {
	/* #ifndef APP-NVUE */
	display: flex;
	flex-direction: column;
	/* #endif */
	padding: 15px;
	width: 300px;
	background-color: #fff;
	border-radius: 10px;
}

.uni-tip-title {
	margin-bottom: 10px;
	text-align: center;
	font-weight: bold;
	font-size: 16px;
	color: #333;
}

.uni-tip-content {
	/* padding: 15px;
  */
	font-size: 14px;
	color: #666;
}

.uni-tip-group-button {
	/* #ifndef APP-NVUE */
	display: flex;
	/* #endif */
	flex-direction: row;
	margin-top: 20px;
}

.uni-tip-button {
	flex: 1;
	text-align: center;
	font-size: 14px;
	color: #3b4144;
}
</style>
